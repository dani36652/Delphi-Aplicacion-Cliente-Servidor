unit UJSONTool;

interface
uses
  URecords, URest,
  System.Classes, System.Types, System.SysConst, System.SysUtils,
  System.StrUtils, System.Generics.Collections, System.JSON,
  System.JSON.Types, System.JSON.Converters, System.JSON.Builders;

type TJSONTool = class(TComponent)
  private
    BaseURL: string;
  public
    function ObtenerClientes: AClientes;
    function ObtenerProveedores: AProveedores;
    function ObtenerGerentes: AGerentes;
    function ObtenerProductos: AProductos;
    function CheckConnection: boolean;
    property URLServidor: string read BaseURL write BaseURL;
end;

implementation
uses
  Generales;

{ TJSONTool }

function TJSONTool.CheckConnection: boolean;
var
  REST: TREST;
begin
  REST:= TREST.Create(nil);
  try
    try
      REST.SetBaseURL(BaseURL);
      REST.GET('', 'checkconnection');
      Result:= REST.Respuesta.Code = 200;
    except on E: exception do
      begin
        EscribirLogExcepciones(E.ClassName + ': ' + E.Message);
        Result:= False;
      end;
    end;
  finally
    FreeAndNil(REST);
  end;
end;

function TJSONTool.ObtenerClientes: AClientes;
var
  REST: TREST;
  JSONObj: TJSONObject;
  JArrayClientes: TJSONArray;
  i: integer;
begin
  REST:= TREST.Create(nil);
  try
    try
      REST.SetBaseURL(BaseURL);
      REST.GET('', 'clientes');
      if REST.Respuesta.Code = 200 then
      begin
        SetLength(Result, 0);
        JSONObj:= TJSONObject.ParseJSONValue(REST.Respuesta.Mensaje) as TJSONObject;
        JArrayClientes:= JSONObj.Values['clientes'] as TJSONArray;

        if JArrayClientes.Count > 0 then
        begin
          for i:= 0 to JArrayClientes.Count - 1 do
          begin
            SetLength(Result, i + 1);
            Result[i].ID:= TJSONObject(JArrayClientes.Items[i]).Values['id'].Value.ToInteger;
            Result[i].Nombre:= TJSONObject(JArrayClientes.Items[i]).Values['nombre'].Value;
            Result[i].Apellido:= TJSONObject(JArrayClientes.Items[i]).Values['apellido'].Value;
            Result[i].Edad:= TJSONObject(JArrayClientes.Items[i]).Values['edad'].Value.ToInteger;
            Result[i].Sexo:= TJSONObject(JArrayClientes.Items[i]).Values['sexo'].Value;
          end;
        end;
      end else SetLength(Result, 0);
    except on E: exception do
      begin
        EscribirLogExcepciones(E.ClassName + ': ' + E.Message);
        SetLength(Result, 0);
      end;
    end;
  finally
    FreeAndNil(REST); //Liberar en memoria
  end;
end;

function TJSONTool.ObtenerGerentes: AGerentes;
begin

end;

function TJSONTool.ObtenerProductos: AProductos;
begin

end;

function TJSONTool.ObtenerProveedores: AProveedores;
begin

end;

end.
